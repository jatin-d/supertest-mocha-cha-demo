{
  "stats": {
    "suites": 1,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2021-09-10T10:58:03.598Z",
    "end": "2021-09-10T10:58:07.761Z",
    "duration": 4163,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "034547fb-8068-42fe-8cf5-8767befa151a",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e701e378-0c5c-4375-82e2-ecf75a0e2787",
          "title": "GET omdb movie API",
          "fullFile": "/Users/jd/sei/api_supertest_mocha_chai/omdb.test.js",
          "file": "/omdb.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should return status code 200 and content type JSON when searching with keyword",
              "fullTitle": "GET omdb movie API Should return status code 200 and content type JSON when searching with keyword",
              "timedOut": false,
              "duration": 509,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const queries = { \n    s: \"avengers\",\n    type: 'movie',\n}\nconst response = await getUrl(queries)\nexpect(response).to.status(200);\nexpect(response).to.be.json;",
              "err": {},
              "uuid": "aed70bad-46c9-4678-aa48-660fffdec2f4",
              "parentUUID": "e701e378-0c5c-4375-82e2-ecf75a0e2787",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should returns an array of 10 movies and title of each movie should contains the keyword when searching with keyword",
              "fullTitle": "GET omdb movie API Should returns an array of 10 movies and title of each movie should contains the keyword when searching with keyword",
              "timedOut": false,
              "duration": 243,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const queries = { \n    s: \"avengers\",\n    type: 'movie',\n}\nconst response = await getUrl(queries)\nexpect(response.body.Search).to.be.an('array').to.have.lengthOf(10);\nfor(let i=0; i<response.body.Search.length; i++){\n    expect(response.body.Search[i].Title.toLowerCase()).to.include('avengers');\n}",
              "err": {},
              "uuid": "26f2c912-85d6-46ed-8c56-395c1e735e37",
              "parentUUID": "e701e378-0c5c-4375-82e2-ecf75a0e2787",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return one movie with the same title including plot when searching with exact title and querying plot=full",
              "fullTitle": "GET omdb movie API Should return one movie with the same title including plot when searching with exact title and querying plot=full",
              "timedOut": false,
              "duration": 562,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const queries = { \n    t: \"planet hulk\",\n    type: 'movie',\n    plot:'full'\n}\nconst response = await getUrl(queries)\nexpect(response.body.Title.toLowerCase()).to.equal(\"planet hulk\");\nexpect(response.body.Plot).to.not.be.empty;",
              "err": {},
              "uuid": "0dd4baa9-9529-4bba-891d-db93517a58a3",
              "parentUUID": "e701e378-0c5c-4375-82e2-ecf75a0e2787",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should returns an array of 10 series and title of each series should contains the keyword when searching with type series and keyword",
              "fullTitle": "GET omdb movie API Should returns an array of 10 series and title of each series should contains the keyword when searching with type series and keyword",
              "timedOut": false,
              "duration": 249,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const queries = { \n    s: \"avengers\",\n    type: 'series',\n}\nconst response = await getUrl(queries)\nexpect(response.body.Search).to.be.an('array').to.have.lengthOf(10);\nfor(let i=0; i<response.body.Search.length; i++){\n    expect(response.body.Search[i].Title.toLowerCase()).to.include('avengers');\n    expect(response.body.Search[i].Type).to.equal('series');\n}",
              "err": {},
              "uuid": "0712f884-7cc0-4fc8-96ff-f691f632e50d",
              "parentUUID": "e701e378-0c5c-4375-82e2-ecf75a0e2787",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should returns \"movie not found\" error when searching with invalid keyword",
              "fullTitle": "GET omdb movie API Should returns \"movie not found\" error when searching with invalid keyword",
              "timedOut": false,
              "duration": 245,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const queries = { \n    s: \"kjdkjfhjkah\",\n    type: 'movie',\n};\nconst response = await getUrl(queries);\nexpect(response.body.Error.toLowerCase()).to.equal(\"movie not found!\");",
              "err": {},
              "uuid": "3baf5fd1-473c-4599-b21f-a06175bbb16d",
              "parentUUID": "e701e378-0c5c-4375-82e2-ecf75a0e2787",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should returns appropriate movie title when search by valid id",
              "fullTitle": "GET omdb movie API Should returns appropriate movie title when search by valid id",
              "timedOut": false,
              "duration": 527,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const queries = { \n    i: \"tt1483025\",\n    type: 'movie',\n};\nconst response = await getUrl(queries);\nexpect(response.body.Title).to.equal(\"Planet Hulk\");",
              "err": {},
              "uuid": "f49e20e8-ff12-4e16-94cf-930871fd8d39",
              "parentUUID": "e701e378-0c5c-4375-82e2-ecf75a0e2787",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should returns \"Invalid IMDB id\" error when search by invalid id",
              "fullTitle": "GET omdb movie API Should returns \"Invalid IMDB id\" error when search by invalid id",
              "timedOut": false,
              "duration": 450,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const queries = { \n    i: \"tt1483025cbd775\",\n    type: 'movie',\n};\nconst response = await getUrl(queries);\nexpect(response.body.Error.toLowerCase()).to.equal(\"incorrect imdb id.\");",
              "err": {},
              "uuid": "9c20576e-195f-4602-8f1e-a24fdff1852d",
              "parentUUID": "e701e378-0c5c-4375-82e2-ecf75a0e2787",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should returns movies of same year when search by keyword and year",
              "fullTitle": "GET omdb movie API should returns movies of same year when search by keyword and year",
              "timedOut": false,
              "duration": 462,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const queries = { \n    s: \"panda\",\n    y: \"2012\",\n    type: 'movie',\n};\nconst response = await getUrl(queries);\nfor(let i=0; i<response.body.Search.length; i++){\n    expect(response.body.Search[i].Title.toLowerCase()).to.include('panda');\n    expect(response.body.Search[i].Year).to.equal('2012');\n};",
              "err": {},
              "uuid": "0ea647d2-b07b-4aee-9091-ad7f9e2b9acf",
              "parentUUID": "e701e378-0c5c-4375-82e2-ecf75a0e2787",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should returns \"movie not found\" error when search with invalid year",
              "fullTitle": "GET omdb movie API Should returns \"movie not found\" error when search with invalid year",
              "timedOut": false,
              "duration": 454,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const queries = { \n    s: \"panda\",\n    y: \"2046\",\n    type: 'movie',\n};\nconst response = await getUrl(queries);\nexpect(response.body.Error.toLowerCase()).to.equal(\"movie not found!\")",
              "err": {},
              "uuid": "b4033420-f80a-4f61-809d-a6d8934b6066",
              "parentUUID": "e701e378-0c5c-4375-82e2-ecf75a0e2787",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should returns genre, country, and language when search with valid title",
              "fullTitle": "GET omdb movie API Should returns genre, country, and language when search with valid title",
              "timedOut": false,
              "duration": 454,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const queries = { \n    t: \"kung fu panda\",\n    type: 'movie',\n};\nconst response = await getUrl(queries);\nexpect(response.body.Genre).to.not.be.empty;\nexpect(response.body.Country).to.not.be.empty;\nexpect(response.body.Language).to.not.be.empty;",
              "err": {},
              "uuid": "7e8d9f96-dc31-425f-bd18-0b44c4e9d311",
              "parentUUID": "e701e378-0c5c-4375-82e2-ecf75a0e2787",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "aed70bad-46c9-4678-aa48-660fffdec2f4",
            "26f2c912-85d6-46ed-8c56-395c1e735e37",
            "0dd4baa9-9529-4bba-891d-db93517a58a3",
            "0712f884-7cc0-4fc8-96ff-f691f632e50d",
            "3baf5fd1-473c-4599-b21f-a06175bbb16d",
            "f49e20e8-ff12-4e16-94cf-930871fd8d39",
            "9c20576e-195f-4602-8f1e-a24fdff1852d",
            "0ea647d2-b07b-4aee-9091-ad7f9e2b9acf",
            "b4033420-f80a-4f61-809d-a6d8934b6066",
            "7e8d9f96-dc31-425f-bd18-0b44c4e9d311"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4155,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.1.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}